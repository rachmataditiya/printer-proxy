#!/bin/bash
set -euo pipefail

# =============================================================================
# SSL Certificate Setup Script for Printer Proxy
# =============================================================================
# This script sets up SSL certificates and nginx reverse proxy
# for secure printer-proxy access
# =============================================================================

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
DOMAIN="${1:-localhost}"
TARGET_PORT="${2:-8080}"
NGINX_AVAIL="/etc/nginx/sites-available"
NGINX_ENABLED="/etc/nginx/sites-enabled"
SITE_NAME="$DOMAIN"
SITE_CONF="$NGINX_AVAIL/$SITE_NAME.conf"
LINK_CONF="$NGINX_ENABLED/$SITE_NAME.conf"
CERT_DIR="/etc/ssl/localcerts"
KEY_PATH="$CERT_DIR/$DOMAIN.key"
CRT_PATH="$CERT_DIR/$DOMAIN.crt"

# Functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "This script must be run as root (use sudo)"
        exit 1
    fi
}

# Check if command exists
has_cmd() { 
    command -v "$1" >/dev/null 2>&1
}

# Install required packages
install_packages() {
    log_info "Installing required packages..."
    
    local need_install=()
    for pkg in nginx openssl; do
        if ! dpkg -s "$pkg" >/dev/null 2>&1; then
            need_install+=("$pkg")
        fi
    done

    if (( ${#need_install[@]} > 0 )); then
        log_info "Installing packages: ${need_install[*]}"
        apt-get update -y
        DEBIAN_FRONTEND=noninteractive apt-get install -y "${need_install[@]}"
        log_success "Packages installed successfully"
    else
        log_success "All required packages already installed"
    fi
}

# Calculate certificate days left
cert_days_left() {
    local crt="$1"
    if [[ ! -f "$crt" ]]; then
        echo -1
        return 0
    fi

    local end_raw
    end_raw="$(openssl x509 -enddate -noout -in "$crt" | cut -d= -f2)" || { echo -1; return 0; }

    local end_epoch now_epoch
    end_epoch="$(date -d "$end_raw" +%s)" || { echo -1; return 0; }
    now_epoch="$(date +%s)"
    local diff_days=$(( (end_epoch - now_epoch) / 86400 ))
    echo "$diff_days"
}

# Generate self-signed certificate
generate_self_signed() {
    log_info "Generating self-signed certificate for $DOMAIN"
    
    mkdir -p "$CERT_DIR"
    chmod 700 "$CERT_DIR"

    # Check OpenSSL version and use appropriate method
    if openssl req -help 2>&1 | grep -q -- "-addext"; then
        # Modern OpenSSL with -addext support
        openssl req -x509 -nodes -newkey rsa:2048 \
            -days 825 \
            -keyout "$KEY_PATH" \
            -out "$CRT_PATH" \
            -subj "/C=ID/ST=Jakarta/L=Jakarta/O=LocalDev/OU=Dev/CN=$DOMAIN" \
            -addext "subjectAltName=DNS:$DOMAIN,IP:127.0.0.1,IP:::1" \
            -addext "basicConstraints=CA:FALSE" \
            -addext "keyUsage=digitalSignature,keyEncipherment" \
            -addext "extendedKeyUsage=serverAuth"
    else
        # Fallback for older OpenSSL
        local CSR_PATH
        CSR_PATH="$(mktemp)"
        openssl req -new -nodes -newkey rsa:2048 \
            -keyout "$KEY_PATH" \
            -out "$CSR_PATH" \
            -subj "/C=ID/ST=Jakarta/L=Jakarta/O=LocalDev/OU=Dev/CN=$DOMAIN"

        openssl x509 -req -in "$CSR_PATH" -signkey "$KEY_PATH" -out "$CRT_PATH" -days 825 \
            -extfile <(printf "subjectAltName=DNS:%s,IP:127.0.0.1,IP:::1\nbasicConstraints=CA:FALSE\nkeyUsage=digitalSignature,keyEncipherment\nextendedKeyUsage=serverAuth\n" "$DOMAIN")
        rm -f "$CSR_PATH"
    fi

    chmod 600 "$KEY_PATH"
    chmod 644 "$CRT_PATH"
    log_success "Certificate generated: $CRT_PATH (valid 825 days)"
}

# Ensure certificate exists and is valid
ensure_certificate() {
    local days_left
    days_left="$(cert_days_left "$CRT_PATH")"
    
    if [[ "$days_left" -lt 0 ]]; then
        generate_self_signed
    elif [[ "$days_left" -lt 30 ]]; then
        log_warning "Certificate expires in $days_left days. Regenerating..."
        generate_self_signed
    else
        log_success "Certificate is valid for $days_left days"
    fi
}

# Write nginx configuration
write_nginx_conf() {
    log_info "Writing nginx configuration: $SITE_CONF"

    cat > "$SITE_CONF" << EOF
# Auto-generated by setup-ssl.sh for Printer Proxy
server {
    listen 80;
    listen [::]:80;
    server_name ${DOMAIN};
    
    # Redirect HTTP to HTTPS
    return 301 https://\$host\$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ${DOMAIN};

    # SSL Certificate Configuration
    ssl_certificate     ${CRT_PATH};
    ssl_certificate_key ${KEY_PATH};

    # SSL Security Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Proxy to Printer Proxy Service
    location / {
        proxy_pass http://127.0.0.1:${TARGET_PORT};
        proxy_http_version 1.1;

        # Standard proxy headers
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header X-Forwarded-Host \$host;
        proxy_set_header X-Forwarded-Port \$server_port;

        # WebSocket support (if needed)
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection \$connection_upgrade;

        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;

        # Disable buffering for real-time responses
        proxy_buffering off;
        proxy_request_buffering off;
    }

    # Health check endpoint (no auth required)
    location /healthz {
        proxy_pass http://127.0.0.1:${TARGET_PORT}/healthz;
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        
        # Quick response for health checks
        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
    }

    # Admin endpoints (restrict access)
    location /admin/ {
        # Restrict to local network (adjust as needed)
        allow 127.0.0.1;
        allow 192.168.0.0/16;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        deny all;
        
        proxy_pass http://127.0.0.1:${TARGET_PORT};
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    # API endpoints (restrict access)
    location /api/ {
        # Restrict to local network (adjust as needed)
        allow 127.0.0.1;
        allow 192.168.0.0/16;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        deny all;
        
        proxy_pass http://127.0.0.1:${TARGET_PORT};
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    # Logging
    access_log /var/log/nginx/printer-proxy-access.log;
    error_log /var/log/nginx/printer-proxy-error.log;
}

# WebSocket connection upgrade mapping
map \$http_upgrade \$connection_upgrade {
    default upgrade;
    ''      close;
}
EOF
}

# Enable site and reload nginx
enable_and_reload() {
    log_info "Enabling nginx site and reloading configuration..."
    
    mkdir -p "$NGINX_AVAIL" "$NGINX_ENABLED"

    # Create symbolic link
    ln -sfn "$SITE_CONF" "$LINK_CONF"
    log_success "Site enabled: $LINK_CONF"

    # Test nginx configuration
    log_info "Testing nginx configuration..."
    if nginx -t; then
        log_success "Nginx configuration is valid"
    else
        log_error "Nginx configuration test failed"
        exit 1
    fi

    # Reload nginx
    log_info "Reloading nginx..."
    if has_cmd systemctl; then
        systemctl reload nginx
    else
        service nginx reload
    fi
    log_success "Nginx reloaded successfully"
}

# Show setup summary
show_summary() {
    echo
    echo "============================================================================="
    echo "🔐 SSL SETUP COMPLETED SUCCESSFULLY!"
    echo "============================================================================="
    echo
    echo "📋 Configuration Summary:"
    echo "  • Domain: $DOMAIN"
    echo "  • Target Port: $TARGET_PORT"
    echo "  • Certificate: $CRT_PATH"
    echo "  • Private Key: $KEY_PATH"
    echo "  • Nginx Config: $SITE_CONF"
    echo "  • Enabled Site: $LINK_CONF"
    echo
    echo "🌐 Access URLs:"
    echo "  • HTTP: http://$DOMAIN (redirects to HTTPS)"
    echo "  • HTTPS: https://$DOMAIN"
    echo "  • Health Check: https://$DOMAIN/healthz"
    echo
    echo "🔒 Security Features:"
    echo "  • HTTP to HTTPS redirect"
    echo "  • TLS 1.2/1.3 only"
    echo "  • Strong cipher suites"
    echo "  • HSTS headers"
    echo "  • Security headers (X-Frame-Options, etc.)"
    echo "  • Admin/API endpoints restricted to local networks"
    echo
    echo "🖨️ Printer Endpoints:"
    echo "  • Print: https://$DOMAIN/{printer_id}/cgi-bin/epos/service.cgi"
    echo "  • Health: https://$DOMAIN/health/printer/{printer_id}"
    echo
    echo "🔧 Management:"
    echo "  • Nginx Status: sudo systemctl status nginx"
    echo "  • Nginx Logs: sudo journalctl -u nginx -f"
    echo "  • Access Logs: /var/log/nginx/printer-proxy-access.log"
    echo "  • Error Logs: /var/log/nginx/printer-proxy-error.log"
    echo
    echo "⚠️  Important Notes:"
    echo "  • Self-signed certificate - browsers will show security warning"
    echo "  • For production, use Let's Encrypt or commercial certificates"
    echo "  • Admin/API endpoints are restricted to local networks"
    echo "  • Adjust IP restrictions in nginx config as needed"
    echo
    echo "🔄 Certificate Renewal:"
    echo "  • Certificate valid for 825 days (~2.3 years)"
    echo "  • Auto-renewal: Use printer-proxy admin endpoint"
    echo "  • Manual renewal: Run this script again"
    echo
    echo "============================================================================="
}

# Main setup function
main() {
    echo "============================================================================="
    echo "🔐 PRINTER PROXY SSL SETUP"
    echo "============================================================================="
    echo "Setting up SSL certificates and nginx reverse proxy for:"
    echo "  • Domain: $DOMAIN"
    echo "  • Target: http://127.0.0.1:$TARGET_PORT"
    echo "============================================================================="
    echo
    
    check_root
    install_packages
    ensure_certificate
    write_nginx_conf
    enable_and_reload
    show_summary
}

# Show usage information
show_usage() {
    echo "Usage: $0 [DOMAIN] [TARGET_PORT]"
    echo
    echo "Arguments:"
    echo "  DOMAIN      Domain name for SSL certificate (default: localhost)"
    echo "  TARGET_PORT Target port for printer-proxy (default: 8080)"
    echo
    echo "Examples:"
    echo "  $0                           # Setup for localhost:8080"
    echo "  $0 printer.local            # Setup for printer.local:8080"
    echo "  $0 printer.local 8080       # Setup for printer.local:8080"
    echo "  $0 192.168.1.100 8080      # Setup for IP address"
    echo
    echo "This script will:"
    echo "  • Install nginx and openssl if needed"
    echo "  • Generate self-signed SSL certificate"
    echo "  • Configure nginx reverse proxy"
    echo "  • Enable HTTPS with security headers"
    echo "  • Restrict admin endpoints to local networks"
}

# Handle command line arguments
if [[ "${1:-}" == "--help" ]] || [[ "${1:-}" == "-h" ]]; then
    show_usage
    exit 0
fi

# Run main setup
main
