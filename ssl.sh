#!/usr/bin/env bash
set -euo pipefail

# === Konfigurasi dasar (bisa diubah lewat argumen) ===
DOMAIN="${1:-localhost}"
TARGET_PORT="${2:-8080}"

SITE_NAME="$DOMAIN"
NGINX_AVAIL="/etc/nginx/sites-available"
NGINX_ENABLED="/etc/nginx/sites-enabled"
SITE_CONF="$NGINX_AVAIL/$SITE_NAME.conf"
LINK_CONF="$NGINX_ENABLED/$SITE_NAME.conf"

CERT_DIR="/etc/ssl/localcerts"
KEY_PATH="$CERT_DIR/$DOMAIN.key"
CRT_PATH="$CERT_DIR/$DOMAIN.crt"

DAYS_VALID="${DAYS_VALID:-825}"   # ~27 bulan (batas aman untuk self-signed modern browser)
RENEW_THRESHOLD_DAYS="${RENEW_THRESHOLD_DAYS:-30}"

# === Cek harus root ===
if [[ $EUID -ne 0 ]]; then
  echo "[✘] Harus dijalankan sebagai root. Gunakan sudo."
  exit 1
fi

# === Helper: command tersedia? ===
has_cmd() { command -v "$1" >/dev/null 2>&1; }

# === Install dependensi dasar ===
ensure_packages() {
  local need_install=()
  for pkg in nginx openssl; do
    if ! dpkg -s "$pkg" >/dev/null 2>&1; then
      need_install+=("$pkg")
    fi
  done

  if (( ${#need_install[@]} > 0 )); then
    echo "[…] Menginstal paket: ${need_install[*]}"
    apt-get update -y
    DEBIAN_FRONTEND=noninteractive apt-get install -y "${need_install[@]}"
  fi
}

# === Hitung sisa hari sertifikat ===
cert_days_left() {
  local crt="$1"
  if [[ ! -f "$crt" ]]; then
    echo -1
    return 0
  fi

  local end_raw
  end_raw="$(openssl x509 -enddate -noout -in "$crt" | cut -d= -f2)" || { echo -1; return 0; }

  # GNU date (Debian/Ubuntu) paham format ini
  local end_epoch now_epoch
  end_epoch="$(date -d "$end_raw" +%s)" || { echo -1; return 0; }
  now_epoch="$(date +%s)"
  local diff_days=$(( (end_epoch - now_epoch) / 86400 ))
  echo "$diff_days"
}

# === Generate/renew sertifikat self-signed (dengan SAN) ===
generate_self_signed() {
  echo "[…] Membuat sertifikat self-signed untuk $DOMAIN"
  mkdir -p "$CERT_DIR"
  chmod 700 "$CERT_DIR"

  # Jika openssl mendukung -addext, gunakan yang simpel
  if openssl req -help 2>&1 | grep -q -- "-addext"; then
    openssl req -x509 -nodes -newkey rsa:2048 \
      -days "$DAYS_VALID" \
      -keyout "$KEY_PATH" \
      -out "$CRT_PATH" \
      -subj "/C=ID/ST=Jakarta/L=Jakarta/O=LocalDev/OU=Dev/CN=$DOMAIN" \
      -addext "subjectAltName=DNS:$DOMAIN,IP:127.0.0.1,IP:::1" \
      -addext "basicConstraints=CA:FALSE" \
      -addext "keyUsage=digitalSignature,keyEncipherment" \
      -addext "extendedKeyUsage=serverAuth"
  else
    # Fallback untuk OpenSSL lama: CSR + x509 -extfile
    local CSR_PATH
    CSR_PATH="$(mktemp)"
    openssl req -new -nodes -newkey rsa:2048 \
      -keyout "$KEY_PATH" \
      -out "$CSR_PATH" \
      -subj "/C=ID/ST=Jakarta/L=Jakarta/O=LocalDev/OU=Dev/CN=$DOMAIN"

    openssl x509 -req -in "$CSR_PATH" -signkey "$KEY_PATH" -out "$CRT_PATH" -days "$DAYS_VALID" \
      -extfile <(printf "subjectAltName=DNS:%s,IP:127.0.0.1,IP:::1\nbasicConstraints=CA:FALSE\nkeyUsage=digitalSignature,keyEncipherment\nextendedKeyUsage=serverAuth\n" "$DOMAIN")
    rm -f "$CSR_PATH"
  fi

  chmod 600 "$KEY_PATH"
  chmod 644 "$CRT_PATH"
  echo "[✔] Sertifikat dibuat: $CRT_PATH (valid $DAYS_VALID hari)"
}

ensure_certificate() {
  local days_left
  days_left="$(cert_days_left "$CRT_PATH")"
  if [[ "$days_left" -lt 0 ]]; then
    generate_self_signed
  elif [[ "$days_left" -lt "$RENEW_THRESHOLD_DAYS" ]]; then
    echo "[…] Sertifikat tinggal $days_left hari. Renew sekarang."
    generate_self_signed
  else
    echo "[✔] Sertifikat masih berlaku $days_left hari. Tidak perlu renew."
  fi
}

# === Tulis konfigurasi Nginx ===
write_nginx_conf() {
  echo "[…] Menulis server block Nginx: $SITE_CONF"

  cat > "$SITE_CONF" <<EOF
# Auto-generated by setup_nginx_local_ssl.sh
server {
    listen 80;
    listen [::]:80;
    server_name ${DOMAIN};
    return 301 https://\$host\$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ${DOMAIN};

    # Sertifikat self-signed
    ssl_certificate     ${CRT_PATH};
    ssl_certificate_key ${KEY_PATH};

    # TLS & security baseline
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    # HSTS: sesuaikan jika perlu
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # Proxy ke aplikasi lokal di port ${TARGET_PORT}
    location / {
        proxy_pass http://127.0.0.1:${TARGET_PORT};
        proxy_http_version 1.1;

        # Header standar reverse proxy
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;

        # Upgrade untuk WS bila perlu
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection \$connection_upgrade;

        # Optional: matikan buffering untuk stream SSE/WS
        proxy_buffering off;
    }
}

# Map untuk koneksi upgrade (WebSocket)
map \$http_upgrade \$connection_upgrade {
    default upgrade;
    ''      close;
}
EOF
}

# === Enable site dan reload Nginx ===
enable_and_reload() {
  mkdir -p "$NGINX_AVAIL" "$NGINX_ENABLED"

  ln -sfn "$SITE_CONF" "$LINK_CONF"

  echo "[…] Test konfigurasi Nginx"
  nginx -t

  echo "[…] Reload Nginx"
  if has_cmd systemctl; then
    systemctl reload nginx
  else
    service nginx reload
  fi
  echo "[✔] Nginx reload selesai."
}

# === Main flow ===
ensure_packages
ensure_certificate
write_nginx_conf
enable_and_reload

echo
echo "==================== SUMMARY ===================="
echo " Domain        : $DOMAIN"
echo " Proxy target  : http://127.0.0.1:${TARGET_PORT}"
echo " Site conf     : $SITE_CONF"
echo " Enabled link  : $LINK_CONF"
echo " Cert (crt)    : $CRT_PATH"
echo " Cert (key)    : $KEY_PATH"
echo "================================================="
echo "[✔] Selesai. Coba akses: https://${DOMAIN}/"

